\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{listings} 
\usepackage{tikz}
\usepackage{amsmath}

\usetikzlibrary{arrows}

\lstset{language=Java} 


\title{Unit 1 Physics Engine}
\author{straceski.j }
\date{July 2020}

\begin{document}

\maketitle

\section{Abstract Physics Theory}

Everybody knows when something moves unnaturally. Humans seem to have an innate ability to pick up on unnatural movement, off-putting facial features, creepy behavior; all these interactions feel wrong. Why is that? What gives a doll an inherently creepy demeanor? Why don’t people like my jokes? Creepy things, and people, bring the previously mentioned questions to mind. Although I cannot speak to why any specific joke has not landed the eleventh or twelfth time it has been told; I think might have a reasoning for why certain creepy things resonate with so many people. My theory is based on how people see the world, how people pick up on subtle movements. The way hair flows in the wind, water ripples in a lake, or how an apple falls out of a tree. People observe these things hundreds, thousands of times and feel the weight of them in their minds. I also have a second theory, when you understand something, you can control it, learn from it, and use it to improve the world around you. I started making a game around 10 years ago and I started with the physics engine for this very reason.

\section{Time}

Creating believable physics starts with close attention to time. Computers generally measure time with an internal clock, for this example we will be using Java and the most accurate way we can measure time in Java, nanoseconds.

\begin{lstlisting}[frame=single]
    System.nanoTime();
\end{lstlisting}

Because this specific code returns the time since the beginning of time we need to use it to find a delta. A delta is a general term in mathematics for a change. In Java this would look like

\begin{lstlisting}[frame=single]
    long start = System.nanoTime();
    // events
    long end = System.nanoTime(); 
    long delta = end - start;
\end{lstlisting}

Subtracting the start from the end will give us a positive delta, because the end time is greater than the starting time. Think of values on a number line:

\begin{tikzpicture}[scale=1]
    \draw[latex-latex, |->] (0, 0) -- (3.5,0) ;
    \foreach \x in  {0,1,2,3}
        \draw[shift={(\x,0)},color=black] (0pt,3pt) -- (0pt,-3pt);
    \foreach \x in {0,1,2,3}
        \draw[shift={(\x,0)},color=black] (0pt,0pt) -- (0pt,-3pt) node[below] {$\x$};

    \node[anchor=west, align=left] at (0,-1) {if we want to find the time \textbf{from} 1 \textbf{to} 3, we first take 3.};

    \draw[shift={(0,-1.75)}, draw=blue, fill=blue, very thick, |-|] (0,0) -- (3,0);
    \foreach \x in {1,2}
        \draw[shift={(\x,-1.75)},color=blue] (0pt,3pt) -- (0pt,-3pt);
    \foreach \x in {0,1,2,3}
        \draw[shift={(\x,-1.75)},color=blue] (0pt,-3pt) node[below] {$\x$};
        
    \node[anchor=west, align=left] at (0,-2.75) {and then subtract 1 from it.};
    
    \draw[draw=red, fill=red, very thick, |-|] (0,-3.5) -- (1,-3.5);
    
    \foreach \x in {0,1}
        \draw[shift={(\x,-3.5)},color=red] (0pt,-3pt) node[below] {$\x$};

    \node[anchor=west, align=left] at (0,-4.5) {so we get a total value of 2 from 1 to 3};
    
    \draw[draw=green, very thick, |->] (1,-5.25) -- (3,-5.25);
    \foreach \x in {2}
        \draw[shift={(\x,-5.25)},color=green] (0pt,3pt) -- (0pt,-3pt);
    \foreach \x in {1,2,3}
        \draw[shift={(\x,-5.25)},color=green] (0pt,-3pt) node[below] {$\x$};
    
\end{tikzpicture}

This may seem simple, but it is extremely important concept to mentally understand as it is a central idea in the vector math that used in almost every aspect of physics engines.

Once we have this time delta we need to sync it to what is happening on screen. This is the total time that it takes to calculate game methods, draw visuals to the screen, and the time it takes to calculate physics. But we run into a paradox. Our engine needs to include the time that it takes to run the engine in the equation to run the engine.

Fear not, because computer science is messy we simply use a minimum time step to start our calculations and then compensate later. Additionally creating a physics engine where the input is in nanoseconds would be impractical to human understanding so we convert it to seconds before proceeding with the calculations.

\begin{lstlisting}[frame=single]
    long last = 0;
    
    while (running) {
        long current = System.nanoTime();
        long delta = current - last;
        last = current;
        
        float sDelta = (float) (delta / 1e9); //10^9
        sDelta = (float) Math.max(0.0001f, sDelta);
        
        // physics
    }
    
\end{lstlisting}

    In the above code I have rearranged and renamed the time methods as to more accurately represent the structure of a looping physics engine. Each instance that we get the nanosecond time it calculates the difference and then is swapped to the last time. 
    
    \textbf{This is another important concept in our physics engine, I'll call it a rolling register, it simply stores the value of our variable in the last iteration of our loop.}

    \section{Velocity \& Acceleration}
    \subsection{Abstract}
        How do you know how fast an apple is going? Well you measure the distance the apple has traveled over a certain TIME. But that’s not exactly how things behave in real life is it. Apples don’t just go from being on a tree to going the speed of sound or vice versa, they have acceleration or a change in velocity over TIME. The reason we started with time is because it governs every physical interaction that takes place in the engine. Motion includes both time and distance so in order to understand motion within the framework of our engine we need to understand. \textbf{SPACE}
    \subsection{Application}

    Space includes both the distance between objects and the objects themselves.
    In my engine we have two types of objects.
    
    Circles and Polygons.
    
    Circles are defined by a center and a radius.
    
    Polygons by a set of vectors.
    
    These shapes cannot really represent physical objects by themselves because they have no mass, velocity, acceleration, or position. So we encapsulate all these aspects into what I call an Entity.
    
    I'll redefine the goal of the engine as making entities behave as they would in real life.
    
    To have our shapes and object behave realistically we take our acceleration multiply it by our time delta and add it to our velocity. We then take our velocity multiply it by our time delta and add it to our position to get our new position. 
    
    \begin{lstlisting}[frame=single]
velocity = velocity.addi(acceleration.scalei(sDelta));
position = position.addi(velocity.scalei(sDelta));
// i endings on the end of the objects create new 
// instances of each element rather than
// modifying the existing data
    \end{lstlisting}
    
    Scaling in this case is equivalent to multiplication but for a Vector.
    
    What happens if two entities happen to end up overlapping? That would not be very natural at all.
    We need a way to detect when entities overlap; we need a way of detecting...
    
    \section{Collisions}
    Collisions are the first math heavy aspect of a physics engine and can require a lot of complex geometry. I will go over some interesting examples but leave most of the details out. Regardless, all collisions generate what are called normals. A Normal is a general term for a vector with a total length of 1. They are very useful in vector math as they convey a pure direction. Every collision can be broken up into a set of normals and lengths. If the normal represents the direction of the collision the length represents the depth. We will use both of these values later but we first need to figure out how to find them.
    
    For two circles this is very straight forward.
    
    We simply find the two centers and measure the distance between the two of them.
    If the distance between the two of them happens to be less than the sum of the radii, the circles are colliding. 
    This is because circles have a constant radius from each center point. Since all we need to know is the distance from a given point to the circles center to detect a collision we can extrapolate this to both circles. The direction that they collide on is \(u\) normalized or the vector from one center to another normalized. And The depth is \(f\), the difference between the two radii and the distance from center to center.
    
\definecolor{ffqqqq}{rgb}{1,0,0}
\definecolor{xdxdff}{rgb}{0.49019607843137253,0.49019607843137253,1}
\definecolor{ttffqq}{rgb}{0.2,1,0}
\definecolor{ududff}{rgb}{0.30196078431372547,0.30196078431372547,1}
\definecolor{uuuuuu}{rgb}{0.26666666666666666,0.26666666666666666,0.26666666666666666}
\begin{tikzpicture}[line cap=round,line join=round,>=triangle 45,x=1cm,y=1cm]
\begin{axis}[
x=1cm,y=1cm,
axis lines=middle,
ymajorgrids=true,
xmajorgrids=true,
xmin=-4.017094768060926,
xmax=8.843923530353837,
ymin=-2.809059515234751,
ymax=5.291462457796623,
xtick={-4,-3,...,8},
ytick={-2,-1,...,5},]
\clip(-4.017094768060926,-2.809059515234751) rectangle (8.843923530353837,5.291462457796623);
\draw [line width=2pt] (0,0) circle (2.191460700081113cm);
\draw [line width=2pt] (3,2) circle (2.280898945591409cm);
\draw [->,line width=2pt,color=ttffqq] (0,0) -- (3,2);
\draw [line width=2pt,color=ffqqqq] (1.1091122443821073,0.7394081629214049)-- (1.8286514728425978,1.219100981895065);
\begin{scriptsize}
\draw [fill=uuuuuu] (0,0) circle (2pt);
\draw[color=uuuuuu] (0.1035499006848983,0.25582992005911004) node {$A$};
\draw[color=black] (-1.0481830812626924,1.7658798297237261) node {$c$};
\draw [fill=ududff] (3,2) circle (2.5pt);
\draw[color=ududff] (3.0980556537486343,2.2777611550337657) node {$B$};
\draw[color=black] (1.9079315724027903,3.838999197229386) node {$d$};
\draw[color=ttffqq] (2.3174366326508227,1.829864995387481) node {$u$};
\draw [fill=xdxdff] (1.1091122443821073,0.7394081629214049) circle (2.5pt);
\draw[color=xdxdff] (1.2168917832342359,1.0108548748914181) node {$C$};
\draw [fill=xdxdff] (1.8286514728425978,1.219100981895065) circle (2.5pt);
\draw[color=xdxdff] (1.9335256386682922,1.4971421339359556) node {$D$};
\draw[color=ffqqqq] (1.6263968434822682,0.9596667423604142) node {$f$};
\end{scriptsize}
\end{axis}
\end{tikzpicture}
    
    TODO: WRITE ABOUT MASS COLLISIONS AND WHAT MAKES MY TAKE ON PHYSICS ENGINES COOL BY INCORPORATING BRANCHING PATHS IN THE ABSTRACT.
    
    
    
\end{document}
